const fs = require("fs-extra");
const chalk = require("chalk");
const nodeUrl = require("url");

class Utils {
  /**
   * generate repo directory based on name space and remove all `/` in the name because don't create directory per `/`.
   * @param {string} name - name of repo with name space.
   * TODO: this should be configurable by passing an option.
   */
  static generateRepoName(name) {
    return name.replace(/\//g, "-").replace(/\s+/g, "");
  }

  /**
   * make repoName colorable. :)
   *
   * @param {string} name - name of repo after generated by generateRepoName
   */
  static generateRepoNameColorized(name) {
    return chalk.cyan(name);
  }

  /**
   * generate next link url that should be called for our pagination process.
   * @param {string} link link url returned from gitlab api response
   */
  static generateNextLink(link) {
    return link.replace("<http", "http").replace(`>; rel="next"`, "");
  }

  constructor(bar, scriptOptions) {
    const { token, url, output } = scriptOptions;
    this.token = token;
    this.url = url;
    this.output = output;
    this.bar = bar;
  }

  /**
   * a utility function for detect given repo is cloned or not. return true or false.
   * @param {string} repoName - the name of repo for checking directory.
   */
  isRepoExist(repoName) {
    return fs.existsSync(`${this.output}/${repoName}/.git`);
  }

  /**
   * a utility function should called after a repo has been successfully cloned.
   * @param {string} repoName - the name of repo to be displayed.
   * @param {boolean} showMessage - show completed message or not.
   */
  cloneCompleted(repoName, showMessage = true) {
    if (showMessage) {
      console.log(
        `\n${chalk.green(
          `successfully cloned`
        )} ${Utils.generateRepoNameColorized(repoName)} \n`
      );
    }

    /**
     * increase cli progress bar by 1 when a repo cloned.
     */
    this.bar.increment(1);
  }

  /**
   * generate url of a repo based on Personal Access Token.
   * by this method there is no need to satisfy cloning in `https` or `ssh` mode.
   * @param {string} httpUrlToRepo http url of repo
   */
  generateRepoUrl(httpUrlToRepo) {
    const parsedUrl = nodeUrl.parse(httpUrlToRepo);

    return parsedUrl.href.replace(
      parsedUrl.host,
      `oauth2:${this.token}@${parsedUrl.host}`
    );
  }
}

module.exports = Utils;
